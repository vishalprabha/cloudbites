version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: on-failure
    networks:
      - kafka_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
 

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: on-failure
    networks:
      - kafka_network
    depends_on:
      - zookeeper
    ports:
      - 29090:29090
      - 29093:29093
    environment:
      
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29090,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29090
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL 
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    
  redis:
    image: redis
    networks:
      - kafka_network
    ports:
      - 6379:6379
    depends_on:
      - kafka
  

    
  kafka-consumer:
    container_name: kafka-consumer
    restart: always
    image: "soma5722/kafka-consumer:latest"
    networks:
      - kafka_network
    depends_on:
      - redis

  kafka-producer:
    container_name: kafka-producer
    restart: always
    image: "soma5722/kafka-producer:latest"
    networks:
      - kafka_network
    depends_on:
     - kafka-consumer
  
  flask_api:
    container_name: flask_api
    restart: always
    env_file: .env
    build: .
    networks:
      - db_network
      - web_network
      - kafka_network
    depends_on:
     - kafka
    image: aravindbs/cloudbites-flask-api
    
  nginx:
    container_name: nginx
    restart: always
    image: "nginx:latest"
    ports:
      - "5000:5000"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    networks:
      - web_network
    depends_on: 
      - flask_api
networks:
  db_network:
    driver: bridge
  web_network:
    driver: bridge
  kafka_network:
    name: kafka_docker_example_net
 